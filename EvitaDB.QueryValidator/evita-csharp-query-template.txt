using System;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Newtonsoft.Json;

using EvitaDB.Client;
using EvitaDB.Client.Config;
using EvitaDB.Client.Models;
using EvitaDB.Client.DataTypes;
using EvitaDB.Client.Models.Schemas;
using EvitaDB.Client.Models.Data;

using static EvitaDB.Client.Queries.IQueryConstraints;
using static EvitaDB.Client.Queries.Filter.AttributeSpecialValue;
using static EvitaDB.Client.Queries.Requires.StatisticsType;
using static EvitaDB.Client.Queries.Requires.StatisticsBase;
using static EvitaDB.Client.Queries.Query;
using static EvitaDB.Client.Queries.Order.OrderDirection;
using static EvitaDB.Client.Queries.Requires.PriceContentMode;
using static EvitaDB.Client.Queries.Requires.FacetStatisticsDepth;
using static EvitaDB.Client.Queries.Requires.QueryPriceMode;
using static EvitaDB.Client.Queries.Requires.EmptyHierarchicalEntityBehaviour;

public class DynamicClass
{
    private const string Host = "#HOST#";
    private static readonly EvitaClientConfiguration EvitaClientConfiguration = 
        Host == "localhost" ? new EvitaClientConfiguration.Builder()
            .SetHost(Host)
            .SetPort(5556)
            .SetUseGeneratedCertificate(true)
            .SetUsingTrustedRootCaCertificate(false)
            .Build() :
        new EvitaClientConfiguration.Builder()
            .SetHost(Host)
            .SetPort(5556)
            .SetUseGeneratedCertificate(false)
            .SetUsingTrustedRootCaCertificate(true)
            .Build();
            
    public static void Main()
    {
    }
    
    public static async Task<(EvitaResponse<ISealedEntity>, IEntitySchema)> Run(string catalogName) 
    {
        Environment.SetEnvironmentVariable(IDevelopmentConstants.TestRun, "true");
        EvitaClient evita = await EvitaClient.Create(EvitaClientConfiguration);
        #QUERY#
        IEntitySchema entitySchema = evita.CreateReadOnlySession(catalogName).GetEntitySchemaOrThrow(entities.Query.Collection.EntityType);
        return (entities, entitySchema);
    }
}