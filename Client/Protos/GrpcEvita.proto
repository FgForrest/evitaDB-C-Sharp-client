syntax = "proto3";

package io.evitadb.externalApi.grpc.generated;
option java_multiple_files = true;
option csharp_namespace = "EvitaDB";

import "google/protobuf/empty.proto";
import "GrpcEnums.proto";
import "GrpcCatalogSchemaMutation.proto";

message GrpcEvitaSessionRequest {
  string catalogName = 1;
  bool dryRun = 2;
}

message GrpcEvitaSessionResponse {
  string sessionId = 1;
  GrpcSessionType sessionType = 2;
  GrpcCatalogState catalogState = 3;
}

message GrpcEvitaSessionTerminationRequest {
  string catalogName = 1;
  string sessionId = 2;
}

message GrpcEvitaSessionTerminationResponse {
  bool terminated = 1;
}

message GrpcCatalogNamesResponse {
  repeated string catalogNames = 1;
}

message GrpcDeleteCatalogIfExistsRequest {
  string catalogName = 1;
}

message GrpcDeleteCatalogIfExistsResponse {
  bool success = 1;
}

message GrpcUpdateEvitaRequest {
  repeated GrpcTopLevelCatalogSchemaMutation schemaMutations = 1;
}

service EvitaService {
  rpc CreateReadOnlySession(GrpcEvitaSessionRequest) returns (GrpcEvitaSessionResponse);
  rpc CreateReadWriteSession(GrpcEvitaSessionRequest) returns (GrpcEvitaSessionResponse);
  rpc CreateBinaryReadOnlySession(GrpcEvitaSessionRequest) returns (GrpcEvitaSessionResponse);
  rpc CreateBinaryReadWriteSession(GrpcEvitaSessionRequest) returns (GrpcEvitaSessionResponse);
  rpc TerminateSession(GrpcEvitaSessionTerminationRequest) returns (GrpcEvitaSessionTerminationResponse);
  rpc GetCatalogNames(google.protobuf.Empty) returns (GrpcCatalogNamesResponse);
  rpc DeleteCatalogIfExists(GrpcDeleteCatalogIfExistsRequest) returns (GrpcDeleteCatalogIfExistsResponse);
  rpc Update(GrpcUpdateEvitaRequest) returns (google.protobuf.Empty);
}